//
// Generated file, do not edit! Created by nedtool 5.6 from MyNetMsg.msg.
//

#ifndef __MYNETMSG_M_H
#define __MYNETMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>MyNetMsg.msg:1</tt> by nedtool.
 * <pre>
 * packet MyNetMsg
 * {
 *     int inicial = false;
 *     int numSeq;
 *     int origen;
 *     int ruta[4];
 *     simtime_t rutaTimes[4];
 * }
 * </pre>
 */
class MyNetMsg : public ::omnetpp::cPacket
{
  protected:
    int inicial;
    int numSeq;
    int origen;
    int ruta[4];
    ::omnetpp::simtime_t rutaTimes[4];

  private:
    void copy(const MyNetMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyNetMsg&);

  public:
    MyNetMsg(const char *name=nullptr, short kind=0);
    MyNetMsg(const MyNetMsg& other);
    virtual ~MyNetMsg();
    MyNetMsg& operator=(const MyNetMsg& other);
    virtual MyNetMsg *dup() const override {return new MyNetMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getInicial() const;
    virtual void setInicial(int inicial);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual int getOrigen() const;
    virtual void setOrigen(int origen);
    virtual unsigned int getRutaArraySize() const;
    virtual int getRuta(unsigned int k) const;
    virtual void setRuta(unsigned int k, int ruta);
    virtual unsigned int getRutaTimesArraySize() const;
    virtual ::omnetpp::simtime_t getRutaTimes(unsigned int k) const;
    virtual void setRutaTimes(unsigned int k, ::omnetpp::simtime_t rutaTimes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyNetMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyNetMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MYNETMSG_M_H

